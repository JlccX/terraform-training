provider "aws" {
    region = "us-east-1"
    access_key = "${var.access_key}"
    secret_key = "${var.secret_key}"
}

resource "aws_s3_bucket" "terraform_state" {
    bucket = "terraform-test-jose"

    versioning {
        enabled = true
    }

    lifecycle {
        prevent_destroy = true
    }
}

resource "aws_launch_configuration" "example" {
  image_id = "ami-33e4bc49"
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.instance.id}"]
  key_name        = "${var.key_name}"
  
  user_data = <<-EOF
              #!/bin/bash
                #sudo apt-get update
                #sudo apt-get install -y nginx
                #sudo service nginx start
                cd /home/ubuntu
                echo "Hello, world<br/>" > index.html
                echo "<br/>" >> index.html
                date >> index.html
                echo "<br/>" >> index.html
                uname -n >> index.html
                python -m SimpleHTTPServer "${var.server_port}"
              EOF
  lifecycle {
    create_before_destroy = true
  }

  connection {
        user        = "ubuntu"
        private_key = "${file(var.private_key_path)}"
    }

}


resource "aws_security_group" "instance" {
    name            = "terraform-example-instance"
    description     = "Allow HTTP traffic from anywhere"

    ingress {
        from_port   = "${var.server_port}"
        to_port     = "${var.server_port}"
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    # Opening SSH port
    ingress {
        from_port   = "${var.ssh_port}"
        to_port     = "${var.ssh_port}"
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    lifecycle {
        create_before_destroy = true
    }
}

data "aws_availability_zones" "all" {}

resource "aws_autoscaling_group" "example" {
    launch_configuration = "${aws_launch_configuration.example.id}"
    availability_zones   = ["${data.aws_availability_zones.all.names}"]

    min_size = 3
    max_size = 10

    load_balancers = ["${aws_elb.example.name}"]
    health_check_type = "ELB"

    tag {
        key = "Name"
        value = "terraform-asg-example"
        propagate_at_launch = true
    }
}

resource "aws_elb" "example" {
    name = "terraform-asg-example"
    security_groups = ["${aws_security_group.elb.id}"]
    availability_zones = ["${data.aws_availability_zones.all.names}"]

    health_check {
        healthy_threshold = 2
        unhealthy_threshold = 2
        timeout = 5
        interval = 300
        target = "HTTP:${var.server_port}/"
    }

    listener {
        lb_port = "${var.http_port}"
        lb_protocol = "http"
        instance_port = "${var.server_port}"
        instance_protocol = "http"
    }

    connection {
        user        = "ubuntu"
        private_key = "${file(var.private_key_path)}"
    }

    tags {
        myTag = "aws-elb-instance"
    }
}

resource "aws_security_group" "elb" {
    name = "terraform-example-elb"

    egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port = "${var.http_port}"
        to_port = "${var.http_port}"
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
}



output "elbs_dns_name" {
   value = "${aws_elb.example.dns_name}"
}

# output "addresses" {
#     value = "${aws_launch_configuration.examples.public_ip}"
# }

output "s3_bucket_arn" {
    value = "${aws_s3_bucket.terraform_state.arn}"
}

